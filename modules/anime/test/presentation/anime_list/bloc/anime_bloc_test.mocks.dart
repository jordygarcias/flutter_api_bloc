// Mocks generated by Mockito 5.3.0 from annotations
// in anime/test/presentation/anime_list/bloc/anime_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:anime/domain/entities/anime_entity.dart' as _i10;
import 'package:anime/domain/entities/genre_entity.dart' as _i8;
import 'package:anime/domain/repositories/anime_genre_respository.dart' as _i2;
import 'package:anime/domain/repositories/anime_repository.dart' as _i4;
import 'package:anime/domain/usecases/get_anime_by_genre_use_case.dart' as _i9;
import 'package:anime/domain/usecases/get_anime_genre_list_usecase.dart' as _i5;
import 'package:core/failures/failures.dart' as _i7;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAnimeGenreRepository_0 extends _i1.SmartFake
    implements _i2.AnimeGenreRepository {
  _FakeAnimeGenreRepository_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeAnimeRepository_2 extends _i1.SmartFake
    implements _i4.AnimeRepository {
  _FakeAnimeRepository_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [GetAnimeGenreListUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAnimeGenreListUseCase extends _i1.Mock
    implements _i5.GetAnimeGenreListUseCase {
  MockGetAnimeGenreListUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AnimeGenreRepository get repository => (super.noSuchMethod(
          Invocation.getter(#repository),
          returnValue:
              _FakeAnimeGenreRepository_0(this, Invocation.getter(#repository)))
      as _i2.AnimeGenreRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, List<_i8.GenreEntity>>> call() =>
      (super.noSuchMethod(Invocation.method(#call, []),
          returnValue:
              _i6.Future<_i3.Either<_i7.Failure, List<_i8.GenreEntity>>>.value(
                  _FakeEither_1<_i7.Failure, List<_i8.GenreEntity>>(
                      this, Invocation.method(#call, [])))) as _i6
          .Future<_i3.Either<_i7.Failure, List<_i8.GenreEntity>>>);
}

/// A class which mocks [GetAnimeByGenreUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAnimeByGenreUseCase extends _i1.Mock
    implements _i9.GetAnimeByGenreUseCase {
  MockGetAnimeByGenreUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.AnimeRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
              returnValue:
                  _FakeAnimeRepository_2(this, Invocation.getter(#repository)))
          as _i4.AnimeRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, List<_i10.AnimeEntity>>> call(
          int? genreId) =>
      (super.noSuchMethod(Invocation.method(#call, [genreId]),
          returnValue:
              _i6.Future<_i3.Either<_i7.Failure, List<_i10.AnimeEntity>>>.value(
                  _FakeEither_1<_i7.Failure, List<_i10.AnimeEntity>>(
                      this, Invocation.method(#call, [genreId])))) as _i6
          .Future<_i3.Either<_i7.Failure, List<_i10.AnimeEntity>>>);
}
